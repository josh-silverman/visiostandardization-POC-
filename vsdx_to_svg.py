import streamlit as st
import openai
import os
import base64
from dotenv import load_dotenv

# --- Load environment variables ---
load_dotenv()
AZURE_OPENAI_ENDPOINT = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_API_KEY = os.getenv("AZURE_OPENAI_API_KEY")
AZURE_OPENAI_DEPLOYMENT = os.getenv("AZURE_OPENAI_DEPLOYMENT")  # GPT-4o deployment

# --- Initialize Azure OpenAI client ---
openai.api_type = "azure"
openai.api_base = AZURE_OPENAI_ENDPOINT
openai.api_version = "2024-02-15-preview"
openai.api_key = AZURE_OPENAI_API_KEY

st.title("Diagram Standardizer: AI-Generated SVG (All Shapes as Squares)")

st.markdown("""
1. **Upload a PNG diagram**.
2. **GPT-4o Vision analyzes and outputs SVG code, with all shapes replaced by squares at their original locations, keeping labels and connectors.**
3. **View and download the standardized SVG diagram.**
""")

# --- 1. Upload PNG ---
uploaded_file = st.file_uploader("Upload your PNG diagram", type=["png"])

if uploaded_file is not None:
    st.image(uploaded_file, caption="Uploaded Image", use_column_width=True)
    st.markdown("Click the button below to have GPT-4o generate the standardized SVG.")

    if st.button("Generate SVG with GPT-4o"):
        uploaded_file.seek(0)
        image_bytes = uploaded_file.read()
        image_base64 = base64.b64encode(image_bytes).decode()

        # --- GPT-4o prompt ---
        extraction_prompt = (
            "Look at this diagram. Output SVG code that reconstructs the exact diagram using only squares for all shapes, "
            "keeping their original positions and labels, and drawing the connectors/arrows. Output only the SVG code."
        )

        with st.spinner("Sending image to Azure OpenAI GPT-4o..."):
            try:
                response = openai.ChatCompletion.create(
                    engine=AZURE_OPENAI_DEPLOYMENT,
                    messages=[
                        {"role": "system", "content": "You are a helpful assistant who analyzes diagrams and outputs SVG code."},
                        {
                            "role": "user",
                            "content": [
                                {"type": "text", "text": extraction_prompt},
                                {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{image_base64}"}}
                            ],
                        }
                    ],
                    max_tokens=2000,
                )
                answer = response['choices'][0]['message']['content']

                # --- Extract SVG code from the response ---
                # Try to find <svg ...>...</svg> block
                import re
                svg_match = re.search(r'(<svg.*?</svg>)', answer, re.DOTALL | re.IGNORECASE)
                if not svg_match:
                    st.error("Could not extract SVG code from the model response.")
                    st.code(answer)
                    st.stop()
                svg_code = svg_match.group(1)

                st.markdown("**Standardized SVG Diagram (all shapes as squares):**")
                st.image(svg_code)

                st.download_button(
                    label="Download SVG",
                    data=svg_code,
                    file_name="standardized_diagram.svg",
                    mime="image/svg+xml"
                )

                st.markdown("**Raw SVG code generated by GPT-4o:**")
                st.code(svg_code, language="svg")

            except Exception as e:
                st.error(f"Azure OpenAI error: {e}")


### Above code uses AI to convert image and show the svg code.
### Below code just converts .vsdx to .svg


# import os
# from azure.storage.blob import BlobServiceClient
# import subprocess
# from dotenv import load_dotenv
# load_dotenv()

# # --- Config ---
# BASE_BLOB_NAME = "Test-image"  # Change this only!
# SOURCE_CONTAINER = "initial-vsdx"
# TARGET_CONTAINER = "svg-files"

# # Environment variable for security
# AZURE_CONNECTION_STRING = os.environ['AZURE_STORAGE_CONNECTION_STRING']

# # Derived variables
# SOURCE_BLOB = f"{BASE_BLOB_NAME}.vsdx"
# LOCAL_VSDX = f"{BASE_BLOB_NAME}.vsdx"

# # --- Download VSDX ---
# blob_service = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)
# src_container_client = blob_service.get_container_client(SOURCE_CONTAINER)

# with open(LOCAL_VSDX, "wb") as f:
#     download_stream = src_container_client.download_blob(SOURCE_BLOB)
#     f.write(download_stream.readall())

# print(f"Downloaded {LOCAL_VSDX}")

# # --- Convert to SVG using LibreOffice ---
# result = subprocess.run(
#     ["libreoffice", "--headless", "--convert-to", "svg", LOCAL_VSDX],
#     capture_output=True
# )
# if result.returncode != 0:
#     print("Conversion failed:", result.stderr.decode())
#     exit(1)

# print("Conversion to SVG done.")

# # --- Find produced SVG(s) ---
# svg_files = [f for f in os.listdir() if f.lower().endswith('.svg')]
# if not svg_files:
#     print("No SVG files found!")
#     exit(1)

# # --- Upload SVG(s) to Azure Blob Storage ---
# tgt_container_client = blob_service.get_container_client(TARGET_CONTAINER)
# for svg_file in svg_files:
#     with open(svg_file, "rb") as data:
#         blob_name = svg_file  # Or customize the name as needed
#         tgt_container_client.upload_blob(
#             blob_name,
#             data,
#             overwrite=True
#         )
#     print(f"Uploaded {svg_file} to {TARGET_CONTAINER}/{blob_name}")

# print("All SVG files uploaded.")




#### LOOK AT LINE 90